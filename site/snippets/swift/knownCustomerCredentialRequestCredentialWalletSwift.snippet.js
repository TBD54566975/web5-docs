export default "func requestKnownCustomerCredential(credentialEndpoint: URL, accessToken: String) async throws {\n    guard let cNonce = walletStorage.cNonce else {\n        throw RequestCredentialError.cNonceMissing\n    }\n    \n    /*************************************************\n    * Construct & sign the JWT payload\n    **************************************************/\nlet issuedAtDate = Date()\nlet jsonCodable = AnyCodable(cNonce)\nlet jwtClaims = JWT.Claims(\n    issuer: userBearerDid.uri, // user's DID string\n    audience: issuerBearerDid.uri, // Issuer's DID string\n    issuedAt: issuedAtDate,\n    misc: [\"nonce\": jsonCodable]\n)\n\ndo {\n    let signedJwt = try JWT.sign(did: userBearerDid, claims: jwtClaims)\n        \n        let requestBody: [String: Any] = [\n            \"proof\": [\n                \"proof_type\": \"jwt\",\n                \"jwt\": signedJwt\n            ]\n        ]\n        \n        /*************************************************\n        * Request & securely store KCC\n        **************************************************/\n        var request = URLRequest(url: credentialEndpoint)\n        request.httpMethod = \"POST\"\n        // Include the access token in the Authorization header\n        request.setValue(\"Bearer \\(accessToken)\", forHTTPHeaderField: \"Authorization\")\n        request.setValue(\"application/json\", forHTTPHeaderField: \"Content-Type\")\n        request.httpBody = try JSONSerialization.data(withJSONObject: requestBody)\n        \n        let (data, response) = try await URLSession.shared.data(for: request)\n        \n        guard let httpResponse = response as? HTTPURLResponse, httpResponse.statusCode == 200 else {\n            throw RequestCredentialError.networkResponseNotOK(\"Network response was not ok: \\(response)\")\n        }\n        \n        if let data = try JSONSerialization.jsonObject(with: data) as? [String: Any], let credential = data[\"credential\"] as? String {\n            SecureStorage.shared.setItem(\"signedCredential\", credential: credential)\n        } else {\n            throw RequestCredentialError.signedCredentialNotFound\n        }\n        \n    } catch {\n        throw RequestCredentialError.jwtSigningFailed(error.localizedDescription)\n    }\n}\n";