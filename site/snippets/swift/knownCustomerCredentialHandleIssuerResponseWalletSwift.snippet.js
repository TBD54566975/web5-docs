export default "struct WalletStorage {\n    var credentialIssuer: URL?\n    var preAuthorizedCode: String?\n    var credentialEndpoint: URL?\n    var tokenEndpoint: URL?\n    var accessToken: String?\n    var cNonce: String?\n}\n\nvar walletStorage = WalletStorage()\n\nfunc handleIssuerResponse(issuerResponse: [String: Any]) async throws {\n    guard let credentialOffer = issuerResponse[\"credential_offer\"] as? [String: Any],\n        let credentialIssuerString = credentialOffer[\"credential_issuer\"] as? String,\n        let credentialIssuerURL = URL(string: credentialIssuerString),\n        let grants = credentialOffer[\"grants\"] as? [String: Any],\n        let preAuthorizedCode = grants[\"urn:ietf:params:oauth:grant-type:pre-authorized_code\"] as? String else {\n        print(\"Invalid issuer response format\")\n        return\n    }\n    \n    /***********************************************************************\n    * Store the credential_issuer URL and pre_authorized_code for future use\n    ************************************************************************/\n    walletStorage.credentialIssuer = credentialIssuerURL\n    walletStorage.preAuthorizedCode = preAuthorizedCode\n    \n    if let urlString = issuerResponse[\"url\"] as? String {\n        // Direct the user to this URL to complete their Identity Verification\n        openIdvForm(urlString: urlString)\n    } else {\n       try await fetchIssuerMetadata() // function shown in next step\n    }\n}\n";