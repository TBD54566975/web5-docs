export default "let payinCurrencyCode = \"USD\" // Desired payin currency code\nlet payoutCurrencyCode = \"KES\" // Desired payout currency code\n\n// Customer's signed credentials in JWT format\nlet credentials = [vcJwtResidence, vcJwtSanctions]\n\n// Array to store the matched offerings\nvar matchedOfferings = [Offering]()\n\nfor pfiDid in pfiDids {\n    let offerings = try await tbDEXHttpClient.getOfferings(pfiDIDURI:pfiDid)\n\n    // Filter offerings based on the desired currency pair\n    let filteredOfferings = offerings.filter { offering in\n        offering.data.payin.currencyCode == payinCurrencyCode &&\n        offering.data.payout.currencyCode == payoutCurrencyCode\n    }\n    for offering in filteredOfferings {\n        // Extract the presentation definition from the offering\n        do {\n            // Validate customer's VCs against the offering's presentation definition\n            try PresentationExchange.satisfiesPresentationDefinition(\n                    vcJWTs: credentials,\n                    presentationDefinition: offering.data.requiredClaims!\n                )\n\n            // Add offerings that match the customer's needs and qualifications\n            matchedOfferings.append(offering)\n        } catch {\n            // Offerings where the customer's VCs do not meet the requirements are skipped\n            continue\n        }\n    }\n}\n";