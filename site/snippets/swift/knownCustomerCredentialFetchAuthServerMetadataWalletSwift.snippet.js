export default "func fetchAuthServerMetadata() async throws {\n    guard let credentialIssuerURL = walletStorage.credentialIssuer else {\n        throw MetadataError.credentialIssuerURLNotSet\n    }\n    \n    let authServerMetadataUrl = credentialIssuerURL.appendingPathComponent(\".well-known/oauth-authorization-server\")\n    \n    let (data, response) = try await URLSession.shared.data(from: authServerMetadataUrl)\n    guard (response as? HTTPURLResponse)?.statusCode == 200 else {\n        throw MetadataError.networkError(\"Non-200 response from the server\")\n    }\n\n    guard let authServerMetadata = try? JSONSerialization.jsonObject(with: data) as? [String: Any],\n        let tokenEndpointString = authServerMetadata[\"token_endpoint\"] as? String,\n        let tokenEndpointURL = URL(string: tokenEndpointString) else {\n        throw MetadataError.dataParsingError(\"Failed to parse JSON or missing 'token_endpoint'\")\n    }\n    /****************************************************\n    * Extract and store the token_endpoint for future use\n    *****************************************************/    \n\n    walletStorage.tokenEndpoint = tokenEndpointURL\n\n    guard let preAuthorizedCode = walletStorage.preAuthorizedCode else {\n        throw MetadataError.missingData\n    }\n\n    try await fetchAccessToken(preAuthorizationCode: preAuthorizedCode, tokenEndpoint: tokenEndpointString) // function shown in next step\n}\n";