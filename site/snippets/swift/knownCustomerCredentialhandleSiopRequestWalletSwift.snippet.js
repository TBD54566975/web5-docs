export default "func handleSiopRequest(encodedSiopRequest: String) async throws {\n    /*******************************************************\n    * Decode the SIOP request from the encoded string\n    *******************************************************/\n    guard let siopRequestURL = URL(string: \"https://dummy.com?\\(encodedSiopRequest)\"),\n        let components = URLComponents(url: siopRequestURL, resolvingAgainstBaseURL: true) else {\n        throw URLError(.badURL)\n    }\n\n    var siopRequest: [String: String] = [:]\n    for queryItem in components.queryItems ?? [] {\n        if let value = queryItem.value {\n            siopRequest[queryItem.name] = value.removingPercentEncoding ?? value\n        }\n    }\n\n    /*******************************************************\n    * Generate & sign id_token\n    *******************************************************/\n    let expirationDate = Date().addingTimeInterval(3600) // 1 hour from now\n    let issuedAtDate = Date()\n    let idTokenClaims = JWT.Claims(\n        issuer: userBearerDid.uri,\n        subject: userBearerDid.uri,\n        audience: siopRequest[\"client_id\"],\n        expiration: expirationDate,\n        issuedAt: issuedAtDate\n    )\n\n    let idToken = try JWT.sign(did: userBearerDid, claims: idTokenClaims)\n\n    let vpToken: String?\n    if let responseType = siopRequest[\"response_type\"], responseType.contains(\"vp_token\") {\n        /*********************************************************\n        * Select Credentials based on the Presentation Definition\n        *********************************************************/\n        let pd = siopRequest[\"presentation_definition\"]\n        let pdEncoded = try presentationDefinition(value: pd)\n        let selectedCredentials = try PresentationExchange.selectCredentials(vcJWTs: [nameCredentialJwt, idCredentialJwt], presentationDefinition: pdEncoded)\n\n        try PresentationExchange.satisfiesPresentationDefinition(vcJWTs: selectedCredentials, presentationDefinition: pdEncoded)\n\n        /*******************************************************\n        * Generate & sign vp_token\n        *******************************************************/\n        let vp = try PresentationExchange.createPresentationFromCredentials(vcJWTs: selectedCredentials, presentationDefinition: pdEncoded)\n\n        let vpJsonObject: [String: Any] = [\n            \"context\": [\"https://www.w3.org/2018/credentials/v1\"],\n            \"type\": [\"VerifiablePresentation\"], \n            \"verifiableCredential\": selectedCredentials, // The array of credential JWTs\n            \"presentationSubmission\": vp // The presentation submission \n        ]\n\n        if let jsonData = try? JSONSerialization.data(withJSONObject: vpJsonObject),\n        let jsonString = String(data: jsonData, encoding: .utf8){\n            let jsonCodable = AnyCodable(jsonString)\n            let claims = JWT.Claims(\n                issuer: userBearerDid.uri,\n                subject: userBearerDid.uri,\n                expiration: Date().addingTimeInterval(3600), \n                issuedAt: Date(),\n                misc: [\"vp\": jsonCodable]\n            )\n\n            vpToken = try JWT.sign(did: userBearerDid, claims: claims)\n        }else{\n          throw PresentationError.serializationError\n        }         \n    }else{\n        vpToken = nil\n    }\n\n    /*******************************************************\n    * POST SIOPv2 Authorization response to the response_uri\n    *******************************************************/\n    guard let responseUri = URL(string: siopRequest[\"response_uri\"]!) else {\n        throw URLError(.badURL)\n    }\n\n    var responsePayload: [String: Any] = [\"id_token\": idToken]\n    if let vp = vpToken {\n        responsePayload[\"vp_token\"] = vp\n    }\n\n    var request = URLRequest(url: responseUri)\n    request.httpMethod = \"POST\"\n    request.setValue(\"application/json\", forHTTPHeaderField: \"Content-Type\")\n    request.httpBody = try JSONSerialization.data(withJSONObject: responsePayload)\n\n    let (data, response) = try await URLSession.shared.data(for: request)\n    guard let httpResponse = response as? HTTPURLResponse, httpResponse.statusCode == 200 else {\n        throw URLError(.badServerResponse)\n    }\n\n    guard let json = try? JSONSerialization.jsonObject(with: data) as? [String: Any] else {\n        throw URLError(.cannotParseResponse)\n    }\n\n    try await handleIssuerResponse(issuerResponse: json) // function shown in next step\n}\n";