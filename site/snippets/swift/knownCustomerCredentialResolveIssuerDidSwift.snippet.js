export default "import Web5\nimport Foundation\n// :prepend-end: \n@testable import Web5\n@testable import DevSiteTestSuite\n\nfinal class KnownCustomerCredentialWalletTest: XCTestCase {\n    let nameCredentialJwt =\n        \"eyJ0eXAiOiJKV1QiLCJhbGciOiJFZERTQSIsImtpZCI6ImRpZDpkaHQ6ZmM2cjZiZzY5dDZrOHU5dTlzdTUzYWFmNmp1MXhkcHdkenV3M2tqdThzc2FtYjNwcHN1byMwIn0.eyJ2YyI6eyJAY29udGV4dCI6WyJodHRwczovL3d3dy53My5vcmcvMjAxOC9jcmVkZW50aWFscy92MSJdLCJ0eXBlIjpbIlZlcmlmaWFibGVDcmVkZW50aWFsIiwiSURDYXJkQ3JlZGVudGlhbFBhcnQxIl0sImlkIjoidXJuOnV1aWQ6NTdhNWU4ZWUtYmZlMC00YjQwLWJmMDAtZTA4MTY5ZDk5Y2Q1IiwiaXNzdWVyIjoiZGlkOmRodDpmYzZyNmJnNjl0Nms4dTl1OXN1NTNhYWY2anUxeGRwd2R6dXcza2p1OHNzYW1iM3Bwc3VvIiwiaXNzdWFuY2VEYXRlIjoiMjAyNC0wMy0yMVQyMToyMTo1MVoiLCJjcmVkZW50aWFsU3ViamVjdCI6eyJpZCI6ImRpZDpkaHQ6ejU0Z3U0NnU5Y2VxYjQ4dzM0dGVvNGdxMzR3Z2FvNHJvNzVjd3VyZTk1YWNlNXNpOGR0byIsImdpdmVuX25hbWUiOiJBbGljZSIsImZhbWlseV9uYW1lIjoiU21pdGgifX0sImlzcyI6ImRpZDpkaHQ6ZmM2cjZiZzY5dDZrOHU5dTlzdTUzYWFmNmp1MXhkcHdkenV3M2tqdThzc2FtYjNwcHN1byIsInN1YiI6ImRpZDpkaHQ6ejU0Z3U0NnU5Y2VxYjQ4dzM0dGVvNGdxMzR3Z2FvNHJvNzVjd3VyZTk1YWNlNXNpOGR0byJ9.kt0rKEgZ1_U4eTUNDgUU9LzmFViHsx_1z6llfFAqCdpzwIsKKYbqfbtgckJDsoV9xqgG5TYAVPxeLo5hCAguDA\"\n    let idCredentialJwt =\n        \"eyJ0eXAiOiJKV1QiLCJhbGciOiJFZERTQSIsImtpZCI6ImRpZDpkaHQ6ZmM2cjZiZzY5dDZrOHU5dTlzdTUzYWFmNmp1MXhkcHdkenV3M2tqdThzc2FtYjNwcHN1byMwIn0.eyJ2YyI6eyJAY29udGV4dCI6WyJodHRwczovL3d3dy53My5vcmcvMjAxOC9jcmVkZW50aWFscy92MSJdLCJ0eXBlIjpbIlZlcmlmaWFibGVDcmVkZW50aWFsIiwiSURDYXJkQ3JlZGVudGlhbFBhcnQyIl0sImlkIjoidXJuOnV1aWQ6YTM5ZmQ3NjgtNjVjMy00MDZhLWIwMGItMTg1MjIxM2ExYzhjIiwiaXNzdWVyIjoiZGlkOmRodDpmYzZyNmJnNjl0Nms4dTl1OXN1NTNhYWY2anUxeGRwd2R6dXcza2p1OHNzYW1iM3Bwc3VvIiwiaXNzdWFuY2VEYXRlIjoiMjAyNC0wMy0yMVQyMToyMTo1MVoiLCJjcmVkZW50aWFsU3ViamVjdCI6eyJpZCI6ImRpZDpkaHQ6ejU0Z3U0NnU5Y2VxYjQ4dzM0dGVvNGdxMzR3Z2FvNHJvNzVjd3VyZTk1YWNlNXNpOGR0byIsImJpcnRoZGF0ZSI6IjE5OTAtMDEtMDEiLCJuYXRpb25hbF9pZGVudGlmaWVyIjoiMTIzLTQ1LTY3ODkifX0sImlzcyI6ImRpZDpkaHQ6ZmM2cjZiZzY5dDZrOHU5dTlzdTUzYWFmNmp1MXhkcHdkenV3M2tqdThzc2FtYjNwcHN1byIsInN1YiI6ImRpZDpkaHQ6ejU0Z3U0NnU5Y2VxYjQ4dzM0dGVvNGdxMzR3Z2FvNHJvNzVjd3VyZTk1YWNlNXNpOGR0byJ9.lQOBdE3LGQ_rLz69SQoI_auOsFpsOESBIbHNf9HpYTGYTT2aYw8WrKd1rXQuRqzgELcv92iWQRpWoVm193x3CQ\"\n\n    let issuerBearerDid = try! DIDJWK.create(keyManager: InMemoryKeyManager())\n    let userBearerDid = try! DIDJWK.create(keyManager: InMemoryKeyManager())\n\n    let presentationDefinition = PresentationDefinitionV2(\n        id: \"IDCardCredentials\",\n        name: nil,\n        purpose: nil,\n        format: nil,\n        submissionRequirements: nil,\n        inputDescriptors: [\n            InputDescriptorV2(\n                id: \"givenNameVerification\",\n                name: \"Given Name Verification\",\n                purpose: \"We need to verify your given name.\",\n                format: \"jwt_vc\", \n                constraints: ConstraintsV2(\n                    fields: [\n                        FieldV2(\n                            path: [\"$.credentialSubject.given_name\", \"$.vc.credentialSubject.given_name\"],\n                            filter: [\"type\": \"string\"]\n                        )\n                    ],\n                    limitDisclosure: nil\n                )\n            ),\n            InputDescriptorV2(\n                id: \"familyNameVerification\",\n                name: \"Family Name Verification\",\n                purpose: \"We need to verify your family name.\",\n                format: nil,\n                constraints: ConstraintsV2(\n                    fields: [\n                        FieldV2(\n                            path: [\"$.credentialSubject.family_name\", \"$.vc.credentialSubject.family_name\"],\n                            filter: [\"type\": \"string\"]\n                        )\n                    ],\n                    limitDisclosure: nil\n                )\n            ),\n            InputDescriptorV2(\n                id: \"birthdateVerification\",\n                name: \"Birthdate Verification\",\n                purpose: \"We need to verify your birthdate.\",\n                format: nil, \n                constraints: ConstraintsV2(\n                    fields: [\n                        FieldV2(\n                            path: [\"$.credentialSubject.birthdate\", \"$.vc.credentialSubject.birthdate\"],\n                            filter: [\"type\": \"string\", \"format\": \"date\"]\n                        )\n                    ],\n                    limitDisclosure: nil\n                )\n            ),\n            InputDescriptorV2(\n                id: \"nationalIdentifierVerification\",\n                name: \"National Identifier Verification\",\n                purpose: \"We need to verify your national identifier.\",\n                format: nil,\n                constraints: ConstraintsV2(\n                    fields: [\n                        FieldV2(\n                            path: [\"$.credentialSubject.national_identifier\", \"$.vc.credentialSubject.national_identifier\"],\n                            filter: [\"type\": \"string\"]\n                        )\n                    ],\n                    limitDisclosure: nil\n                )\n            )\n        ]\n    )\n    \n    func testSelectsCredentialsAndSatisfiesPD() async throws {\n        let credentials = [nameCredentialJwt, idCredentialJwt]\n        let selectedCredentials = try! PresentationExchange.selectCredentials(\n            vcJWTs: credentials,\n            presentationDefinition: presentationDefinition\n        )\n        XCTAssertEqual(selectedCredentials.count, 2)\n    }\n\n    func testJWTSignWithValidPayloadAndBearerDid() async throws {\n        let expirationDate = Date().addingTimeInterval(86400)\n        let issuedAtDate = Date()\n\n        let accessTokenPayload = JWT.Claims(\n            issuer: issuerBearerDid.uri,\n            subject: userBearerDid.uri,\n            expiration: expirationDate,\n            issuedAt: issuedAtDate\n        )\n\n        do {\n            // Act\n            let accessToken = try JWT.sign(did: userBearerDid, claims: accessTokenPayload)\n\n            // Assert\n            XCTAssertFalse(accessToken.isEmpty, \"Access token should not be empty.\")\n        } catch {\n            XCTFail(\"JWT.sign() threw an unexpected error: \\(error)\")\n        }\n    }\n\n    enum ResolverError: Error {\n        case idvServiceNotFound\n        case didResolutionFailed(String)\n    }\n\n    // :snippet-start: knownCustomerCredentialResolveIssuerDidSwift\n    func getIDVServiceEndpoint(issuerDidUri: String, \n    usingResolvers resolvers: [DIDMethodResolver]\n    ) async -> String? {\n        /****************************************\n        * Resolve DID & Get IDV Service Endpoint\n        ****************************************/\n        for resolver in resolvers where issuerDidUri.starts(\n        with: \"did:\\(resolver.methodName):\"\n        ) {\n            let resolutionResult = await resolver.resolve(didURI: issuerDidUri)\n            if let service = resolutionResult.didDocument?.service?.first(\n            where: { $0.type == \"IDV\" }\n            ) {\n                switch service.serviceEndpoint {\n                case let .one(uri):\n                    return uri\n                case let .many(uris):\n                    return uris.first\n                }\n            }\n        }\n        return nil\n    }\n    \nfunc getIDVServiceEndpoint(issuerDidUri: String, \nusingResolvers resolvers: [DIDMethodResolver]\n) async -> String? {\n    /****************************************\n    * Resolve DID & Get IDV Service Endpoint\n    ****************************************/\n    for resolver in resolvers where issuerDidUri.starts(\n    with: \"did:\\(resolver.methodName):\"\n    ) {\n        let resolutionResult = await resolver.resolve(didURI: issuerDidUri)\n        if let service = resolutionResult.didDocument?.service?.first(\n        where: { $0.type == \"IDV\" }\n        ) {\n            switch service.serviceEndpoint {\n            case let .one(uri):\n                return uri\n            case let .many(uris):\n                return uris.first\n            }\n        }\n    }\n    return nil\n}\n";