export default "func fetchAccessToken(preAuthorizationCode: String, \ntokenEndpoint: String, retryDelay: TimeInterval = 10.0) \nasync throws {\n    guard let url = URL(string: tokenEndpoint) else {\n        throw AccessTokenError.badURL\n    }\n\n    let requestBody = AccessTokenRequestBody(\n        grantType: \"urn:ietf:params:oauth:grant-type:pre-authorized_code\",\n        code: preAuthorizationCode,\n        clientId: userBearerDid.uri \n    )\n\n    /*********************************************\n    * Send the POST request to the token endpoint\n    **********************************************/\n    let encoder = JSONEncoder()\n    let requestData = try encoder.encode(requestBody)\n    var request = URLRequest(url: url)\n    request.httpMethod = \"POST\"\n    request.setValue(\"application/json\", forHTTPHeaderField: \"Content-Type\")\n    request.httpBody = requestData\n\n    let (data, response) = try await URLSession.shared.data(for: request)\n    guard let httpResponse = response as? HTTPURLResponse, \n    httpResponse.statusCode == 200 else \n    {\n        throw AccessTokenError.httpRequestFailed(\"HTTP error! Status: \\(response)\")\n    }\n\n    let decoder = JSONDecoder()\n    let responseData = try decoder.decode([String: String].self, from: data)\n\n    /*******************************************\n    * Handle the \"authorization_pending\" error\n    ********************************************/\n\n    if let error = responseData[\"error\"], error == \"authorization_pending\" {\n        displayNotification(\"Hang tight, we're still waiting for IDV to complete.\") \n        try await Task.sleep(nanoseconds: UInt64(retryDelay * 1_000_000_000))\n        try await fetchAccessToken(preAuthorizationCode: preAuthorizationCode, tokenEndpoint: tokenEndpoint, retryDelay: retryDelay)\n    } else if let accessToken = responseData[\"access_token\"], let cNonce = responseData[\"c_nonce\"] {\n    /*************************************************\n    * Store the access token & c_nonce for future use\n    **************************************************/\n        walletStorage.accessToken = accessToken\n        walletStorage.cNonce = cNonce\n\n        guard let credentialEndpoint = walletStorage.credentialEndpoint else {\n            throw AccessTokenError.missingData\n        }\n\n        try await requestKnownCustomerCredential(credentialEndpoint: credentialEndpoint, accessToken: accessToken) // function shown in next step\n    } else {\n        throw AccessTokenError.missingAccessToken\n    }\n}\n";