export default "import { VerifiableCredential, Jwt } from '@web5/credentials';\n\nconst preAuthCodeToDidMap = new Map();\n\napp.post('/siopv2/response', async (req, res) => {\n  const walletResponse = req.body; // The SIOPv2 Authorization Response from the Wallet\n\n  /************************************************************\n   * Extract and verify the ID Token from the Wallet's response\n   *************************************************************/\n  try {\n    const compactIdToken = walletResponse.id_token;\n    if (!compactIdToken) {\n      return res.status(400).json({ message: 'Missing ID Token' });\n    }\n    const idTokenVerificationResult = await Jwt.verify({ jwt: compactIdToken });\n\n    /************************************************************\n     * Extract customers Did from verificationResult\n     *************************************************************/\n    const customersDidUri = idTokenVerificationResult.payload.sub;\n    // Perform additional checks (e.g., nonce, audience, expiration)\n\n    const preAuthCode = generateUniquePreAuthCode();\n    preAuthCodeToDidMap.set(preAuthCode, customersDidUri); // needed for subsequent '/token' endpoint\n\n    /********************************************************************\n     * Define the initial structure for the Identity Verification Request\n     ********************************************************************/\n\n    let idvRequest = {\n      credential_offer: {\n        credential_issuer: 'https://issuer.example.com',\n        credential_configuration_ids: [\n          'knownCustomerCredential-basic',\n          'knownCustomerCredential-extended',\n        ],\n        grants: {\n          'urn:ietf:params:oauth:grant-type:pre-authorized_code': preAuthCode,\n        },\n      },\n    };\n\n    let isVPValidIDV = false;\n    if (walletResponse.vp_token) {\n      const compactVpToken = walletResponse.vp_token;\n      const vpTokenVerificationResult = await Jwt.verify({\n        jwt: compactVpToken,\n      });\n\n      isVPValidIDV = true;\n    }\n\n    /********************************************************************\n     * If vp_token is not present include `url` for IDV form\n     ********************************************************************/\n\n    if (!isVPValidIDV) {\n      idvRequest = {\n        ...idvRequest,\n        url: 'https://issuer.example.com/idv/form',\n      };\n    }\n\n    res.json(credentialOffer);\n  } catch (error) {\n    // Handle verification errors\n    return res.status(401).json({\n      errors: ['Invalid token', error.message],\n    });\n  }\n});\n";