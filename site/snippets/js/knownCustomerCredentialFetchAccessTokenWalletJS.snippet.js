export default "function fetchAccessToken(\n  preAuthorizationCode,\n  tokenEndpoint,\n  retryDelay = 10000,\n) {\n  const requestBody = {\n    grant_type: 'urn:ietf:params:oauth:grant-type:pre-authorized_code',\n    code: preAuthorizationCode,\n    client_id: customerBearerDid.uri, // user's did string\n  };\n\n  /*********************************************\n   * Send the POST request to the token endpoint\n   **********************************************/\n  fetch(tokenEndpoint, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(requestBody),\n  })\n    .then((response) => {\n      if (!response.ok) {\n        throw new Error(`HTTP error! Status: ${response.status}`);\n      }\n      return response.json();\n    })\n    .then((data) => {\n      /*******************************************\n       * Handle the \"authorization_pending\" error\n       ********************************************/\n      if (data.error === 'authorization_pending') {\n        displayNotification(\n          \"Hang tight, we're still waiting for IDV to complete.\",\n        );\n\n        setTimeout(() => {\n          fetchAccessToken(preAuthorizationCode, tokenEndpoint, retryDelay);\n        }, retryDelay);\n        /*************************************************\n         * Store the access token & c_nonce for future use\n         **************************************************/\n      } else if (data.access_token) {\n        walletStorage.accessToken = data.access_token;\n        walletStorage.cNonce = data.c_nonce;\n        if (walletStorage.credentialEndpoint) {\n          requestKnownCustomerCredential(\n            walletStorage.credentialEndpoint,\n            walletStorage.accessToken,\n          ); // function shown in next step\n        } else {\n          console.error('Credential endpoint is missing in walletStorage.');\n        }\n      } else {\n        throw new Error('Access token not found in the response');\n      }\n    })\n    .catch((error) => {\n      throw new Error(`Error fetching access token: ${error.message} `);\n    });\n}\n";