export default "app.get('/idv/siopv2/initiate', async (req, res) => {\n  // Construct the SIOPv2 Authorization Request\n  const siopRequestPayload = {\n    client_id: issuerBearerDid.uri, // Issuer's Decentralized Identifier string\n    scope: 'openid', // Standard OpenID Connect scope\n    response_type: 'id_token vp_token', // Expected response formats: ID Token and optionally, Verifiable Presentation Token\n    response_uri: 'https://issuer.example.com/siopv2/response', // Endpoint for SIOP response delivery\n    response_mode: 'direct_post', // Delivery method of the SIOP response\n    nonce: 'n-0S6_WzA2Mj', // Unique string to link the request and response\n    client_metadata: {\n      // Descriptive metadata about the requesting party (Issuer)\n      subject_syntax_types_supported: 'did:dht did:jwk',\n      client_name: 'Issuance Service Name',\n      client_uri: 'https://issuer.example.com',\n      logo_uri: 'https://issuer.example.com/logo.png',\n      tos_uri: 'https://issuer.example.com/tos',\n      policy_uri: 'https://issuer.example.com/privacy',\n    },\n    presentation_definition: {\n      id: 'IDCardCredentials',\n      input_descriptors: [\n        {\n          id: 'IDCardCredential',\n          schema: {\n            uri: [\n              'https://www.w3.org/2018/credentials#VerifiableCredential',\n              'https://www.w3.org/2018/credentials/examples/v1#IDCardCredential',\n            ],\n            name: 'ID Card Credential',\n            purpose: 'We need to verify your identity.',\n          },\n          constraints: {\n            fields: [\n              {\n                path: ['$.vc.credentialSubject.given_name'],\n                purpose: 'The given name on your ID card.',\n              },\n              {\n                path: ['$.vc.credentialSubject.family_name'],\n                purpose: 'The family name on your ID card.',\n              },\n              {\n                path: ['$.vc.credentialSubject.birthdate'],\n                purpose: 'Your birth date.',\n              },\n              {\n                path: ['$.vc.credentialSubject.national_identifier'],\n                purpose: 'Your national identifier.',\n              },\n            ],\n          },\n        },\n      ],\n    },\n  };\n  //highlight-start\n  // Sign the SIOPv2 Auth Request\n  const siopRequestJwtPayload = {\n    sub: issuerBearerDid.uri, // Issuer's Decentralized Identifier string\n    iss: issuerBearerDid.uri, // Issuer's Decentralized Identifier string\n    iat: Math.floor(Date.now() / 1000), // Issued at\n    exp: Math.floor(Date.now() / 1000) + 86400, // Expiration time\n    request: siopRequestPayload, // Embed the SIOPv2 Auth request payload\n  };\n\n  try {\n    const jwtToken = await Jwt.sign({\n      signerDid: issuerBearerDid, \n      payload: siopRequestJwtPayload,\n    });\n  // Send the SIOPv2 Auth Request in JAR format \n    const queryString = `client_id=${encodeURIComponent(issuerBearerDid.uri)}&request=${encodeURIComponent(jwtToken)}`;\n    res.send(queryString);\n  } catch (err) {\n    console.error('Error signing the SIOPv2 request:', err);\n    res.status(500).send('Failed to generate JWT for SIOPv2 Authorization Request');\n  }\n  //highlight-end\n});\n\n\n";