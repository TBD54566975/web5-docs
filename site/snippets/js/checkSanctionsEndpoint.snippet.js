export default "app.get('/check-sanctions', async (req, res) => {\n  /***********************************************\n   * Accepts a JWT in the Authorization header\n   * and parse to get the signer DID\n   ************************************************/\n  try {\n    const authHeader = req.headers['authorization'];\n\n    if (!authHeader) {\n      return res.status(401).json({\n        errors: ['Authorization header required'],\n      });\n    }\n\n    const tokenParts = authHeader.split('Bearer ');\n\n    if (tokenParts.length !== 2) {\n      return res.status(401).json({\n        errors: ['Authorization header format is Bearer <token>'],\n      });\n    }\n\n    const compactJwt = tokenParts[1];\n\n    let subject, payload;\n\n    try {\n      const verificationResult = await Jwt.verify({ jwt: compactJwt });\n      subject = verificationResult.payload.sub;\n      payload = verificationResult.payload;\n    } catch (error) {\n      return res.status(401).json({\n        errors: ['Invalid token'],\n      });\n    }\n\n    /***********************************************\n     * Perform the sanctions check and get the result\n     ************************************************/\n    const sanctionsListResult = checkSanctionsList(payload);\n\n    if (!sanctionsListResult || sanctionsListResult.isSanctioned) {\n      return res.status(403).json({\n        errors: ['User is not eligible for a credential due to sanctions'],\n      });\n    }\n\n    /***********************************************\n     * Create credential\n     ************************************************/\n    const sanctions_credential = await VerifiableCredential.create({\n      type: 'SanctionsCredential',\n      issuer: issuerDid.uri,\n      subject: subject,\n      data: new SanctionsCredential(sanctionsListResult),\n    });\n\n    /***********************************************\n     * To secure the VC, you must sign it\n     ************************************************/\n    const credential_token = await sanctions_credential.sign({\n      did: issuerDid,\n    });\n\n    return res.status(200).json({ credential: credential_token });\n  } catch (error) {\n    // Generic error handling\n    return res.status(500).json({\n      errors: [`An unexpected error occurred: ${error.message}`],\n    });\n  }\n});\n";