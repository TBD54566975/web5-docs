export default "routing {\n    get(\"/check-sanctions\") {\n        try {\n\n            /***********************************************\n            * Accepts a JWT in the Authorization header\n            * and parse to get the signer DID\n            ************************************************/\n            val authHeader = call.request.header(\"Authorization\")\n\n            if (authHeader == null || !authHeader.startsWith(\"Bearer \")) {\n                call.respond(\n                    HttpStatusCode.Unauthorized,\n                    \"Authorization header required\"\n                )\n                return@get\n            }\n\n            val compactJwt = authHeader.removePrefix(\"Bearer \")\n            var signerDid: String? = null\n\n            try {\n                VerifiableCredential.verify(compactJwt)\n\n                val claimsSet: JWTClaimsSet = JWTParser.parse(compactJwt).jwtClaimsSet\n                signerDid = claimsSet.subject\n            } catch (e: SignatureException) {\n                println(\"JWT Verification failed: ${e.message}\")\n                call.respond(HttpStatusCode.Unauthorized, \"Invalid token\")\n                return@get\n            }\n\n            signerDid?.let { did ->\n\n                /***********************************************\n                * Perform the sanctions check and get the result\n                ************************************************/\n                val sanctionsListResult = checkSanctionsList()\n\n                if (sanctionsListResult.isSanctioned) {\n                    call.respond(\n                        HttpStatusCode.Forbidden,\n                        \"User is not eligible for a credential due to sanctions\"\n                    )\n                    return@get\n                }\n\n                /***********************************************\n                * Create credential\n                ************************************************/\n                val sanctionsCredential = VerifiableCredential.create(\n                    type = \"SanctionsCredential\",\n                    issuer = issuerDid.uri.toString(),\n                    subject = did,\n                    data = SanctionsCredential(sanctionsListResult.listsCleared)\n                )\n\n                /***********************************************\n                * To secure the VC, you must sign it\n                ************************************************/\n                val credentialToken = sanctionsCredential.sign(issuerDid)\n\n                call.respond(\n                    HttpStatusCode.OK,\n                    \"Signed Credential Token: $credentialToken\"\n                )\n            } ?: run {\n                call.respond(\n                    HttpStatusCode.BadRequest,\n                    \"Signer DID could not be determined from the JWT\"\n                )\n            }\n\n        } catch (e: Exception) {\n            // Generic error handling\n            call.respond(\n                HttpStatusCode.InternalServerError,\n                \"An unexpected error occurred: ${e.message}\"\n            )\n        }\n    }\n}\n";