export default "val payinCurrencyCode = \"USD\" // Desired payin currency code\nval payoutCurrencyCode = \"KES\" // Desired payout currency code\n\n// Customer's signed credentials in JWT format\nval credentials = listOf(vcJwtResidence, vcJwtSanctions)\n\n// Array to store the matched offerings\nval matchedOfferings = ArrayList<Offering>()\n\nfor (pfiDid in pfiDids) {\n    val offerings = TbdexHttpClient.getOfferings(pfiDid)\n\n    // Filter offerings based on the desired currency pair\n    offerings.filter { offering ->\n        offering.data.payin.currencyCode == payinCurrencyCode && offering.data.payout.currencyCode == payoutCurrencyCode\n    }.forEach { offering ->\n\n        // Extract the presentation definition from the offering\n        offering.data.requiredClaims?.let { presentationDefinition ->\n            try {\n                //highlight-start\n                // Validate customer's VCs against the offering's presentation definition\n                PresentationExchange.satisfiesPresentationDefinition(\n                    credentials, presentationDefinition\n                )\n                //highlight-end\n\n                //  Add offerings that match the customer's needs and qualifications\n                matchedOfferings.add(offering)\n            } catch (e: Exception) {\n                // Offerings where the customer's VCs do not meet the requirements are skipped\n            }\n        }\n    }\n}\n";