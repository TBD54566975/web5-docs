export default "val accessTokenToCNonceMap = ConcurrentHashMap<String, String>()\n\npost(\"/token\") {\n    val requestBody = call.receive<Parameters>()\n    val grantType = requestBody[\"grant_type\"]\n    val code = requestBody[\"code\"]\n\n    if (grantType != \"urn:ietf:params:oauth:grant-type:pre-authorized_code\") {\n        call.respond(HttpStatusCode.BadRequest, mapOf(\"error\" to \"unsupported_grant_type\"))\n        return@post\n    }\n\n    val customersDidUri = preAuthCodeToDidMap[code]\n    if (customersDidUri == null) {\n        call.respond(HttpStatusCode.BadRequest, mapOf(\"error\" to \"invalid_grant\"))\n        return@post\n    }\n\n        // Check the status of the IDV\n    val idvCompleted = checkIDVStatus(customersDidUri)\n    if (!idvCompleted) {\n        call.respond(HttpStatusCode.BadRequest, mapOf(\"error\" to \"authorization_pending\"))\n        return@post\n    }\n\n        /*******************************************\n        Create the payload for the access token\n        ********************************************/\n    val accessTokenPayload = JwtClaimsSet.Builder()\n        .subject(\"did:dht:customer7ufcbgnnc4ikkfpd8b1u9on1b1n7k7wdcapbgo\") // Customer's DID string\n        .issuer(issuerBearerDid.uri) // Issuer's DID string\n        .issueTime(System.currentTimeMillis() / 1000) // Issued time\n        .expirationTime((System.currentTimeMillis() / 1000) + 86400) // Expiration time \n        .build()\n\n        /*******************************************\n        sign accessToken and generate a c_nonce\n        ********************************************/\n    try {\n        val accessToken = Jwt.sign(issuerBearerDid, accessTokenPayload)\n        val cNonce = generateCNonce()\n        accessTokenToCNonceMap[accessToken] = cNonce\n\n        preAuthCodeToDidMap.remove(code)\n\n        call.respond(mapOf(\n            \"access_token\" to accessToken,\n            \"token_type\" to \"bearer\",\n            \"expires_in\" to 86400, // Token expiration time\n            \"c_nonce\" to cNonce, // Challenge nonce to be signed\n            \"c_nonce_expires_in\" to 86400 // cNonce expiration time\n        ))\n    } catch (error: Exception) {\n        call.respond(HttpStatusCode.InternalServerError, mapOf(\n            \"error\" to \"internal_server_error\",\n            \"message\" to error.message.toString()\n        ))\n    }\n}\n";