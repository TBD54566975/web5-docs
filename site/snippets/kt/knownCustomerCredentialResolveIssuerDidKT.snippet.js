export default "private suspend fun resolveIssuerDid(issuerDidUri: String): String {\n    try {\n        /****************************************\n        * Resolve DID & Get IDV Service Endpoint\n        ****************************************/\n        val resolvedDid = DidResolvers.resolve(issuerDidUri)\n        val didDocument = resolvedDid.didDocument ?: throw Exception(\n            \"DID Document is null\"\n        )\n\n        val idvService = didDocument.service?.find { service ->\n            service.type == \"IDV\"\n        } ?: throw Exception(\"IDV service not found in DID Document\")\n\n        return idvService.serviceEndpoint.firstOrNull() ?: throw Exception(\n            \"Service endpoint not found in IDV service\"\n        )\n    } catch (error: Exception) {\n        throw Exception(\"Error resolving DID: ${error.message}\")\n    }\n}\n";