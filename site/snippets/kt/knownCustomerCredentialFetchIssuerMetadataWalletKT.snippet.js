export default "private suspend fun fetchIssuerMetadata() {\n    val client = HttpClient() \n    val issuerMetadataUrl = \"${WalletStorage.credentialIssuer}/.well-known/openid-credential-issuer\"\n\n    try {\n        val httpResponse: HttpResponse = client.get(issuerMetadataUrl)\n        val responseText: String = httpResponse.bodyAsText()\n\n        val issuerMetadata = Json.parseToJsonElement(responseText).jsonObject            \n        /**********************************************\n        * Store the credential endpoint for future use\n        **********************************************/\n        WalletStorage.credentialEndpoint = issuerMetadata[\n            \"credential_endpoint\"\n        ]?.jsonPrimitive?.content\n            ?: throw Exception(\"credential_endpoint is missing in issuer metadata\")\n\n        fetchAuthServerMetadata() // function shown in next step\n    } catch (e: Exception) {\n        println(\"Error in fetching issuer metadata: ${e.message}\")\n    } finally {\n        client.close()\n    }\n}\n";