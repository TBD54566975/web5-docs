export default "private suspend fun sendRequestToIdvServiceEndpoint(idvServiceEndpoint: String) \n= coroutineScope {\n    val client = HttpClient() \n\n    try {\n        val response: HttpResponse = client.get(idvServiceEndpoint)\n        \n        if (response.status.value !in 200..299) {\n            throw Exception(\"Network response was not ok: ${response.status}\")\n        }\n        \n        val encodedSiopRequest = response.bodyAsText()\n        handleSiopRequest(encodedSiopRequest) // function shown in next step\n    } catch (error: Exception) {\n        throw Exception(\"There was a problem with the fetch operation: ${error.message}\")\n    } finally {\n        client.close()\n    }\n}\n";