export default "import web5.sdk.credentials.PresentationExchange\nimport web5.sdk.jose.jwt.Jwt\nimport web5.sdk.credentials.VerifiablePresentation\nimport web5.sdk.credentials.model.PresentationDefinitionV2\nimport web5.sdk.jose.jwt.JwtClaimsSet\n// :prepend-end:\n\nimport web5.sdk.crypto.InMemoryKeyManager\nimport web5.sdk.dids.methods.dht.CreateDidDhtOptions\n\n// :prepend-start: knownCustomerCredentialResolveIssuerDidKT\nimport web5.sdk.dids.methods.dht.DidDht\nimport web5.sdk.dids.methods.jwk.DidJwk\nimport web5.sdk.dids.DidResolvers\n// :prepend-end:\n\nimport kotlinx.coroutines.delay\nimport java.security.SignatureException\nimport io.ktor.server.routing.*\nimport io.ktor.server.application.*\nimport io.ktor.server.response.*\nimport io.ktor.server.request.*\nimport io.ktor.client.statement.*\nimport kotlinx.serialization.json.jsonPrimitive\n\nimport java.util.concurrent.ConcurrentHashMap\nimport java.text.SimpleDateFormat\nimport java.util.Date\nimport java.net.URLEncoder\nimport kotlinx.serialization.json.Json\nimport kotlinx.serialization.json.JsonObject\nimport kotlinx.serialization.json.add\nimport kotlinx.serialization.json.addJsonObject\nimport kotlinx.serialization.json.buildJsonArray\nimport kotlinx.serialization.json.buildJsonObject\nimport kotlinx.serialization.json.put\nimport kotlinx.serialization.Serializable\nimport java.util.UUID\nimport kotlinx.serialization.json.*\nimport java.net.URLDecoder\nimport java.util.*\nimport io.ktor.http.HttpStatusCode\nimport kotlinx.coroutines.async\nimport kotlinx.coroutines.coroutineScope\nimport kotlinx.serialization.encodeToString\nimport java.io.OutputStreamWriter\n\nimport web5.sdk.credentials.model.FieldV2\nimport web5.sdk.credentials.model.ConstraintsV2\n\nimport web5.sdk.credentials.model.InputDescriptorV2\nimport web5.sdk.credentials.model.PresentationSubmission\nimport com.fasterxml.jackson.databind.ObjectMapper\n\nclass KnownCustomerCredentialWalletTest {\n    val userBearerDid = DidDht.create(InMemoryKeyManager())\n    val issuerDid = DidDht.create(InMemoryKeyManager())\n    val issuerDidUri = issuerDid.uri\n\n    val nameCredentialJwt =\n    \"eyJ0eXAiOiJKV1QiLCJhbGciOiJFZERTQSIsImtpZCI6ImRpZDpkaHQ6ZmM2cjZiZzY5dDZrOHU5dTlzdTUzYWFmNmp1MXhkcHdkenV3M2tqdThzc2FtYjNwcHN1byMwIn0.eyJ2YyI6eyJAY29udGV4dCI6WyJodHRwczovL3d3dy53My5vcmcvMjAxOC9jcmVkZW50aWFscy92MSJdLCJ0eXBlIjpbIlZlcmlmaWFibGVDcmVkZW50aWFsIiwiSURDYXJkQ3JlZGVudGlhbFBhcnQxIl0sImlkIjoidXJuOnV1aWQ6NTdhNWU4ZWUtYmZlMC00YjQwLWJmMDAtZTA4MTY5ZDk5Y2Q1IiwiaXNzdWVyIjoiZGlkOmRodDpmYzZyNmJnNjl0Nms4dTl1OXN1NTNhYWY2anUxeGRwd2R6dXcza2p1OHNzYW1iM3Bwc3VvIiwiaXNzdWFuY2VEYXRlIjoiMjAyNC0wMy0yMVQyMToyMTo1MVoiLCJjcmVkZW50aWFsU3ViamVjdCI6eyJpZCI6ImRpZDpkaHQ6ejU0Z3U0NnU5Y2VxYjQ4dzM0dGVvNGdxMzR3Z2FvNHJvNzVjd3VyZTk1YWNlNXNpOGR0byIsImdpdmVuX25hbWUiOiJBbGljZSIsImZhbWlseV9uYW1lIjoiU21pdGgifX0sImlzcyI6ImRpZDpkaHQ6ZmM2cjZiZzY5dDZrOHU5dTlzdTUzYWFmNmp1MXhkcHdkenV3M2tqdThzc2FtYjNwcHN1byIsInN1YiI6ImRpZDpkaHQ6ejU0Z3U0NnU5Y2VxYjQ4dzM0dGVvNGdxMzR3Z2FvNHJvNzVjd3VyZTk1YWNlNXNpOGR0byJ9.kt0rKEgZ1_U4eTUNDgUU9LzmFViHsx_1z6llfFAqCdpzwIsKKYbqfbtgckJDsoV9xqgG5TYAVPxeLo5hCAguDA\";\n    \n    val idCredentialJwt =\n    \"eyJ0eXAiOiJKV1QiLCJhbGciOiJFZERTQSIsImtpZCI6ImRpZDpkaHQ6ZmM2cjZiZzY5dDZrOHU5dTlzdTUzYWFmNmp1MXhkcHdkenV3M2tqdThzc2FtYjNwcHN1byMwIn0.eyJ2YyI6eyJAY29udGV4dCI6WyJodHRwczovL3d3dy53My5vcmcvMjAxOC9jcmVkZW50aWFscy92MSJdLCJ0eXBlIjpbIlZlcmlmaWFibGVDcmVkZW50aWFsIiwiSURDYXJkQ3JlZGVudGlhbFBhcnQyIl0sImlkIjoidXJuOnV1aWQ6YTM5ZmQ3NjgtNjVjMy00MDZhLWIwMGItMTg1MjIxM2ExYzhjIiwiaXNzdWVyIjoiZGlkOmRodDpmYzZyNmJnNjl0Nms4dTl1OXN1NTNhYWY2anUxeGRwd2R6dXcza2p1OHNzYW1iM3Bwc3VvIiwiaXNzdWFuY2VEYXRlIjoiMjAyNC0wMy0yMVQyMToyMTo1MVoiLCJjcmVkZW50aWFsU3ViamVjdCI6eyJpZCI6ImRpZDpkaHQ6ejU0Z3U0NnU5Y2VxYjQ4dzM0dGVvNGdxMzR3Z2FvNHJvNzVjd3VyZTk1YWNlNXNpOGR0byIsImJpcnRoZGF0ZSI6IjE5OTAtMDEtMDEiLCJuYXRpb25hbF9pZGVudGlmaWVyIjoiMTIzLTQ1LTY3ODkifX0sImlzcyI6ImRpZDpkaHQ6ZmM2cjZiZzY5dDZrOHU5dTlzdTUzYWFmNmp1MXhkcHdkenV3M2tqdThzc2FtYjNwcHN1byIsInN1YiI6ImRpZDpkaHQ6ejU0Z3U0NnU5Y2VxYjQ4dzM0dGVvNGdxMzR3Z2FvNHJvNzVjd3VyZTk1YWNlNXNpOGR0byJ9.lQOBdE3LGQ_rLz69SQoI_auOsFpsOESBIbHNf9HpYTGYTT2aYw8WrKd1rXQuRqzgELcv92iWQRpWoVm193x3CQ\";\n    \n    val userVcJwts = listOf(nameCredentialJwt, idCredentialJwt)\n\n    val presentationDefinition = PresentationDefinitionV2(\n        id = \"IDCardCredentials\",\n        inputDescriptors = listOf(\n            // Given Name Verification\n            InputDescriptorV2(\n                id = \"givenNameVerification\",\n                purpose = \"We need to verify your given name.\",\n                constraints = ConstraintsV2(\n                    fields = listOf(FieldV2(\n                        path = listOf(\"$.vc.credentialSubject.given_name\"),\n                        filterJson = ObjectMapper().readTree(\"\"\"{\"type\": \"string\"}\"\"\")\n                    ))\n                )\n            ),\n            // Family Name Verification\n            InputDescriptorV2(\n                id = \"familyNameVerification\",\n                purpose = \"We need to verify your family name.\",\n                constraints = ConstraintsV2(\n                    fields = listOf(FieldV2(\n                        path = listOf(\"$.vc.credentialSubject.family_name\"),\n                        filterJson = ObjectMapper().readTree(\"\"\"{\"type\": \"string\"}\"\"\")\n                    ))\n                )\n            ),\n            // Birthdate Verification\n            InputDescriptorV2(\n                id = \"birthdateVerification\",\n                purpose = \"We need to verify your birthdate.\",\n                constraints = ConstraintsV2(\n                    fields = listOf(FieldV2(\n                        path = listOf(\"$.vc.credentialSubject.birthdate\"),\n                        filterJson = ObjectMapper().readTree(\"\"\"{\"type\": \"string\", \"format\": \"date\"}\"\"\")\n                    ))\n                )\n            ),\n            // National Identifier Verification\n            InputDescriptorV2(\n                id = \"nationalIdentifierVerification\",\n                purpose = \"We need to verify your national identifier.\",\n                constraints = ConstraintsV2(\n                    fields = listOf(FieldV2(\n                        path = listOf(\"$.vc.credentialSubject.national_identifier\"),\n                        filterJson = ObjectMapper().readTree(\"\"\"{\"type\": \"string\"}\"\"\")\n                    ))\n                )\n            )\n        )\n    )\n\n    @Test\n    fun `presentation exchange selects(), satisfies() and creates() VP`() {\n        val selectedCredentials = PresentationExchange.selectCredentials(\n            vcJwts = userVcJwts,\n            presentationDefinition = presentationDefinition\n        )\n        val presentationResult = PresentationExchange.createPresentationFromCredentials(\n            vcJwts = selectedCredentials,\n            presentationDefinition = presentationDefinition\n        )\n\n        val vp = VerifiablePresentation.create(\n            vcJwts = selectedCredentials,\n            holder = userBearerDid.uri,\n            additionalData = mapOf(\"presentation_submission\" to presentationResult)\n        )\n\n        assertNotNull(selectedCredentials, \"Selected credentials should not be null\")\n        assertTrue(selectedCredentials is List<*>, \"Selected credentials should be a list\")\n        assertEquals(2, selectedCredentials.size, \"Selected credentials should contain 2 items\")\n        assertNotNull(vp, \"Verifiable Presentation should not be null\")\n        assertEquals(userBearerDid.uri, vp.holder, \"Holder DID should match\")\n    }\n\n    @Test\n    fun `JwtUtil sign() works with a valid payload and bearer DID`() {\n        val idTokenPayload = JwtClaimsSet.Builder()\n            .subject(userBearerDid.uri.toString()) \n            .issuer(issuerDidUri) \n            .issueTime(System.currentTimeMillis() / 1000) // Issued time\n            .expirationTime((System.currentTimeMillis() / 1000) + 86400) // Expiration time \n            .build()\n\n        try {\n            val idToken = Jwt.sign(userBearerDid, idTokenPayload)\n\n            assertNotNull(idToken, \"idtoken should not be null\")\n            assertTrue(idToken.isNotEmpty(), \"idtoken should not be empty\")\n        } catch (e: Exception) {\n            fail(\"Signing should not throw an exception\")\n        }\n    }\n\n    // :snippet-start: knownCustomerCredentialResolveIssuerDidKT\n    private suspend fun resolveIssuerDid(issuerDidUri: String): String {\n        try {\n            /****************************************\n            * Resolve DID & Get IDV Service Endpoint\n            ****************************************/\n            val resolvedDid = DidResolvers.resolve(issuerDidUri)\n            val didDocument = resolvedDid.didDocument ?: throw Exception(\n                \"DID Document is null\"\n            )\n\n            val idvService = didDocument.service?.find { service ->\n                service.type == \"IDV\"\n            } ?: throw Exception(\"IDV service not found in DID Document\")\n\n            return idvService.serviceEndpoint.firstOrNull() ?: throw Exception(\n                \"Service endpoint not found in IDV service\"\n            )\n        } catch (error: Exception) {\n            throw Exception(\"Error resolving DID: ${error.message}\")\n        }\n    }\n    \nprivate suspend fun handleSiopRequest(encodedSiopRequest: String) {\n    /*******************************************************\n    * Decode the JAR from the encoded URI string\n    *******************************************************/\n    val params = encodedSiopRequest.split(\"&\").associate { \n        val (key, value) = it.split(\"=\")\n        key to URLDecoder.decode(value, \"UTF-8\")\n    }\n\n    val jwtRequest = params[\"request\"] ?: throw Exception(\"JWT request missing in SIOP request\")\n\n    /************************************************************\n    // Verify the JWT, decode its payload & Process SIOP Request\n    ************************************************************/\n    try {\n        VerifiableCredential.verify(jwtRequest)\n    } catch (e: Exception) {\n        throw Exception(\"Failed to verify JWT: ${e.message}\")\n    }\n\n    val claimsSet = JWTParser.parse(jwtRequest).jwtClaimsSet\n    val payloadJson = Json.parseToJsonElement(claimsSet.toJSONObject().toString()).jsonObject\n\n    val siopRequest = payloadJson[\"request\"]?.jsonObject ?: throw Exception(\"Request data not found in JWT payload\")\n\n    val clientId = siopRequest[\"client_id\"]?.jsonPrimitive?.content ?: throw Exception(\"Client ID missing in SIOP request\")\n    val nonce = siopRequest[\"nonce\"]?.jsonPrimitive?.content ?: throw Exception(\"Nonce missing in SIOP request\")\n\n    /*******************************************************\n    * Generate & sign id_token\n    *******************************************************/\n    val idTokenPayload = JwtClaimsSet.Builder()\n        .subject(userBearerDid.uri) // user's DID string\n        .issuer(userBearerDid.uri)\n        .audience(clientId)\n        .issueTime(System.currentTimeMillis() / 1000) // Issued time\n        .expirationTime((System.currentTimeMillis() / 1000) + 86400) // Expiration time \n        .misc(\"nonce\", nonce)\n        .build()\n\n    val idToken = try {\n        Jwt.sign(userBearerDid, idTokenPayload)\n    } catch (e: Exception) {\n        throw Exception(\"Failed to sign id_token: ${e.message}\")\n    }\n\n    var vpToken: String? = null\n    if (\"vp_token\" in siopRequest[\"response_type\"].toString()) {\n        /*******************************************************\n        * Parse the presentation definition from SIOP request\n        *******************************************************/\n        val presentationDefinition = Json.decodeFromString<PresentationDefinitionV2>(\n            siopRequest[\"presentation_definition\"].toString()\n        )\n\n        /*******************************************************\n        * Select Credentials based on the Presentation Definition\n        *******************************************************/\n        val selectedCredentials = PresentationExchange.selectCredentials(\n            vcJwts = userVcJwts, // Array of VC JWTs stored in the user's Wallet\n            presentationDefinition = presentationDefinition\n        )\n        try {\n            PresentationExchange.satisfiesPresentationDefinition(\n                vcJwts = selectedCredentials,\n                presentationDefinition = presentationDefinition\n            )\n        } catch (e: Exception) {\n            throw Exception(\"Presentation definition not satisfied: ${e.message}\")\n        }\n\n        /*******************************************************\n        * Generate & sign vp_token\n        *******************************************************/\n        val presentationResult = PresentationExchange.createPresentationFromCredentials(\n            vcJwts = selectedCredentials,\n            presentationDefinition = presentationDefinition\n        )\n\n        val vp = VerifiablePresentation.create(\n            vcJwts = selectedCredentials,\n            holder = userBearerDid.uri,\n            additionalData = mapOf(\"presentation_submission\" to presentationResult)\n        )\n        \n        val vpClaims = JwtClaimsSet.Builder()\n            .subject(userBearerDid.uri) \n            .issuer(userBearerDid.uri) \n            .issueTime(System.currentTimeMillis() / 1000) // Issued time\n            .expirationTime((System.currentTimeMillis() / 1000) + 86400) // Expiration time \n            .misc(\"holder\", vp.holder)\n            .misc(\"presentation_submission\", presentationResult)\n            .build()\n\n        vpToken = try {\n            Jwt.sign(userBearerDid, vpClaims) \n        } catch (e: Exception) {\n            throw Exception(\"Failed to sign vp_token: ${e.message}\")\n        }\n    }\n\n    /*******************************************************\n    * POST SIOPv2 Authorization response to the response_uri\n    *******************************************************/\n    val responsePayload = buildJsonObject {\n        put(\"id_token\", idToken)\n        vpToken?.let { put(\"vp_token\", it) }\n    }\n\n    val responseUri = siopRequest[\"response_uri\"]?.jsonPrimitive?.content ?: throw Exception(\n        \"Response URI missing in SIOP request\"\n    )\n    postSiopResponse(responseUri, responsePayload.toString()) // function shown in next step\n}\n";