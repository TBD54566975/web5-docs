export default "val preAuthCodeToDidMap = ConcurrentHashMap<String, String>()\n\npost(\"/siopv2/response\") {\n    val walletResponse = call.receive<JsonObject>() // The SIOPv2 Authorization Response from the Wallet\n\n        /************************************************************************\n        * Extract and verify the ID Token from the Wallet's response\n        ************************************************************************/\n    try {\n        val compactIdToken = walletResponse[\"id_token\"]?.jsonPrimitive?.content\n        if (compactIdToken == null) {\n            call.respond(HttpStatusCode.BadRequest, mapOf(\"message\" to \"Missing ID Token\"))\n            return@post\n        }\n        VerifiableCredential.verify(compactIdToken)\n\n        /************************************************************************\n        * Extract customer's DID from verification result\n        ************************************************************************/\n        val claimsSet = JWTParser.parse(compactIdToken).jwtClaimsSet\n        val customersDidUri = claimsSet.subject ?: run {\n            call.respond(HttpStatusCode.BadRequest, mapOf(\"error\" to \"Invalid ID Token\"))\n            return@post\n        }\n        // Perform additional checks (e.g., nonce, audience, expiration)\n\n        val preAuthCode = generateUniquePreAuthCode()\n        preAuthCodeToDidMap[preAuthCode] = customersDidUri // needed for subsequent '/token' endpoint\n\n        /********************************************************************\n        * Define the initial structure for the Identity Verification Request\n        ********************************************************************/\n\n        var idvRequest = buildJsonObject {\n            putJsonObject(\"credential_offer\") {\n                put(\"credential_issuer\", \"https://issuer.example.com\")\n                putJsonArray(\"credential_configuration_ids\") {\n                    add(\"knownCustomerCredential-basic\")\n                    add(\"knownCustomerCredential-extended\")\n                }\n                putJsonObject(\"grants\") {\n                    put(\n                        \"urn:ietf:params:oauth:grant-type:pre-authorized_code\", \n                        preAuthCode\n                    )\n                }\n            }\n        }\n\n        var isVPValidIDV = false\n        if (walletResponse.containsKey(\"vp_token\")) {\n            val compactVpToken = walletResponse[\"vp_token\"]?.jsonPrimitive?.content\n            val vpTokenVerificationResult = VerifiableCredential.verify(\n                compactVpToken ?: \"\"\n            )\n\n            isVPValidIDV = true\n        }\n\n        /********************************************************************\n        * If vp_token is not present include `url` for IDV form\n        ********************************************************************/\n\n        if (!isVPValidIDV) {\n            idvRequest = idvRequest.toMutableMap().apply {\n                put(\"url\", JsonPrimitive(\"https://issuer.example.com/idv/form\"))\n            }.let { buildJsonObject { it.forEach { key, value -> put(key, value) } } }\n        }\n\n        call.respond(HttpStatusCode.OK, idvRequest)\n    } catch (error: Exception) {\n        /************************************************************************\n        * Handle verification errors\n        ************************************************************************/\n        call.respond(HttpStatusCode.Unauthorized, mapOf(\n            \"errors\" to listOf(\"Invalid token\", error.message)\n        ))\n    }\n}\n";